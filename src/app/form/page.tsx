'use client'

import { useState } from 'react'
import { ConsultationFormData } from '@/types/consultation'

const EXAMINATION_OPTIONS = [
  '–û–≥–ª—è–¥',
  '–ê–Ω–∞–ª—ñ–∑–∏',
  '–ï–ö–ì',
  '–†–µ–Ω—Ç–≥–µ–Ω',
  '–£–ó–î',
  '–ö–¢',
  '–ú–†–¢',
]

export default function ConsultationForm() {
  const [formData, setFormData] = useState<ConsultationFormData>({
    name: '',
    age: undefined, // –ü–æ—á–∞—Ç–∫–æ–≤–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ
    gender: '',
    phone: '',
    height: undefined,
    weight: undefined,
    complaints: '',
    examinations: [],
    hasChronicDiseases: false,
    chronicDiseases: '',
    takesMedications: false,
    medications: '',
    painLevel: 0,
    hasAllergy: false,
    allergies: '',
    additionalNotes: '',
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitMessage, setSubmitMessage] = useState<string | null>(null)

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value, type } = e.target
    const checked = (e.target as HTMLInputElement).checked

    setFormData((prev) => ({
      ...prev,
      [name]:
        type === 'checkbox'
          ? checked
          : type === 'number'
            ? Number(value) || undefined // –î–ª—è –≤—Å—ñ—Ö —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            : value,
    }))
  }

  const handleExaminationChange = (exam: string) => {
    setFormData((prev) => ({
      ...prev,
      examinations: prev.examinations.includes(exam)
        ? prev.examinations.filter((e) => e !== exam)
        : [...prev.examinations, exam],
    }))
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ü–ú–¢
  const calculateBMI = () => {
    if (formData.height && formData.weight) {
      const heightInMeters = formData.height / 100
      return (formData.weight / (heightInMeters * heightInMeters)).toFixed(1)
    }
    return null
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ü–ú–¢
  const getBMICategory = (bmi: string) => {
    const bmiValue = parseFloat(bmi)
    if (bmiValue < 18.5)
      return { text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞', color: 'text-blue-600' }
    if (bmiValue < 25)
      return { text: '–ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞', color: 'text-green-600' }
    if (bmiValue < 30)
      return { text: '–ù–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞', color: 'text-yellow-600' }
    return { text: '–û–∂–∏—Ä—ñ–Ω–Ω—è', color: 'text-red-600' }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitMessage(null)

    try {
      const response = await fetch('/api/consultations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      const responseData = await response.json()

      if (response.ok) {
        setSubmitMessage('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!')

        // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          setSubmitMessage(null)
        }, 5000)

        // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
        setFormData({
          name: '',
          age: undefined, // –ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
          gender: '',
          phone: '',
          height: undefined,
          weight: undefined,
          complaints: '',
          examinations: [],
          hasChronicDiseases: false,
          chronicDiseases: '',
          takesMedications: false,
          medications: '',
          painLevel: 0,
          hasAllergy: false,
          allergies: '',
          additionalNotes: '',
        })
      } else {
        const errorMessage = responseData.error || 'Failed to submit'
        setSubmitMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorMessage}`)
      }
    } catch {
      setSubmitMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ä–º–∏')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="mx-auto max-w-2xl rounded-lg bg-white p-6 shadow-lg">
      <h1 className="mb-6 text-center text-2xl font-bold">
        –§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
      </h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ */}
        <div className="rounded-lg bg-blue-50 p-4">
          <h2 className="mb-4 flex items-center text-lg font-semibold">
            üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞
          </h2>

          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <label className="mb-1 block text-sm font-medium">
                –Ü–º&apos;—è *
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="mb-1 block text-sm font-medium">–í—ñ–∫</label>
              <input
                type="number"
                name="age"
                value={formData.age || ''}
                onChange={handleInputChange}
                min="0"
                max="120"
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="mb-1 block text-sm font-medium">–°—Ç–∞—Ç—å</label>
              <select
                name="gender"
                value={formData.gender}
                onChange={handleInputChange}
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              >
                <option value="">–û–±–µ—Ä—ñ—Ç—å</option>
                <option value="–ß–æ–ª–æ–≤—ñ–∫">–ß–æ–ª–æ–≤—ñ–∫</option>
                <option value="–ñ—ñ–Ω–∫–∞">–ñ—ñ–Ω–∫–∞</option>
              </select>
            </div>

            <div>
              <label className="mb-1 block text-sm font-medium">–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="mb-1 block text-sm font-medium">
                –†—ñ—Å—Ç (—Å–º)
              </label>
              <input
                type="number"
                name="height"
                value={formData.height || ''}
                onChange={handleInputChange}
                min="50"
                max="250"
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="mb-1 block text-sm font-medium">
                –í–∞–≥–∞ (–∫–≥)
              </label>
              <input
                type="number"
                name="weight"
                value={formData.weight || ''}
                onChange={handleInputChange}
                min="10"
                max="300"
                className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ü–ú–¢ */}
          {calculateBMI() && (
            <div className="mt-4 rounded-lg border border-blue-200 bg-gradient-to-r from-blue-50 to-green-50 p-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-sm font-medium text-gray-700">
                    –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢)
                  </h3>
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl font-bold text-blue-600">
                      {calculateBMI()}
                    </span>
                    <span
                      className={`text-sm font-medium ${getBMICategory(calculateBMI()!).color}`}
                    >
                      {getBMICategory(calculateBMI()!).text}
                    </span>
                  </div>
                </div>
                <div className="text-right text-xs text-gray-500">
                  <div>–ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞: 18.5-24.9</div>
                  <div>–§–æ—Ä–º—É–ª–∞: –≤–∞–≥–∞/(—Ä—ñ—Å—Ç¬≤)</div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –°–∫–∞—Ä–≥–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞ */}
        <div className="rounded-lg bg-orange-50 p-4">
          <h2 className="mb-4 flex items-center text-lg font-semibold">
            üìù –°–∫–∞—Ä–≥–∏ –ø–∞—Ü—ñ—î–Ω—Ç–∞
          </h2>
          <textarea
            name="complaints"
            value={formData.complaints}
            onChange={handleInputChange}
            placeholder="–û–ø–∏—à—ñ—Ç—å —Å–∫–∞—Ä–≥–∏"
            rows={4}
            className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* –û–±—Å—Ç–µ–∂–µ–Ω–Ω—è */}
        <div className="rounded-lg bg-green-50 p-4">
          <h2 className="mb-4 flex items-center text-lg font-semibold">
            üß™ –Ø–∫—ñ –º–∞—î—Ç–µ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è
          </h2>
          <div className="grid grid-cols-2 gap-2 md:grid-cols-4">
            {EXAMINATION_OPTIONS.map((exam) => (
              <label
                key={exam}
                className="flex cursor-pointer items-center space-x-2"
              >
                <input
                  type="checkbox"
                  checked={formData.examinations.includes(exam)}
                  onChange={() => handleExaminationChange(exam)}
                  className="rounded text-blue-600"
                />
                <span className="text-sm">{exam}</span>
              </label>
            ))}
          </div>
        </div>

        {/* –ú–µ–¥–∏—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è */}
        <div className="rounded-lg bg-purple-50 p-4">
          <h2 className="mb-4 flex items-center text-lg font-semibold">
            ü©∫ –ú–µ–¥–∏—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è
          </h2>

          <div className="space-y-4">
            <div>
              <label className="mb-2 block text-sm font-medium">
                –ß–∏ —î —Ö—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏?
              </label>
              <div className="mb-2 flex space-x-4">
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="hasChronicDiseases"
                    checked={formData.hasChronicDiseases}
                    onChange={() =>
                      setFormData((prev) => ({
                        ...prev,
                        hasChronicDiseases: true,
                      }))
                    }
                    className="mr-1"
                  />
                  –¢–∞–∫
                </label>
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="hasChronicDiseases"
                    checked={!formData.hasChronicDiseases}
                    onChange={() =>
                      setFormData((prev) => ({
                        ...prev,
                        hasChronicDiseases: false,
                      }))
                    }
                    className="mr-1"
                  />
                  –ù—ñ
                </label>
              </div>
              {formData.hasChronicDiseases && (
                <input
                  type="text"
                  name="chronicDiseases"
                  value={formData.chronicDiseases}
                  onChange={handleInputChange}
                  placeholder="–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ —Ö—Ä–æ–Ω—ñ—á–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏"
                  className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
                />
              )}
            </div>

            <div>
              <label className="mb-2 block text-sm font-medium">
                –ß–∏ –ø—Ä–∏–π–º–∞—î –ª—ñ–∫–∏ –ø–æ—Å—Ç—ñ–π–Ω–æ?
              </label>
              <div className="mb-2 flex space-x-4">
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="takesMedications"
                    checked={formData.takesMedications}
                    onChange={() =>
                      setFormData((prev) => ({
                        ...prev,
                        takesMedications: true,
                      }))
                    }
                    className="mr-1"
                  />
                  –¢–∞–∫
                </label>
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="takesMedications"
                    checked={!formData.takesMedications}
                    onChange={() =>
                      setFormData((prev) => ({
                        ...prev,
                        takesMedications: false,
                      }))
                    }
                    className="mr-1"
                  />
                  –ù—ñ
                </label>
              </div>
              {formData.takesMedications && (
                <input
                  type="text"
                  name="medications"
                  value={formData.medications}
                  onChange={handleInputChange}
                  placeholder="–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –ª—ñ–∫–∏"
                  className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
                />
              )}
            </div>

            <div>
              <label className="mb-2 block text-sm font-medium">
                –†—ñ–≤–µ–Ω—å –±–æ–ª—é (0-10): {formData.painLevel}
              </label>
              <input
                type="range"
                name="painLevel"
                min="0"
                max="10"
                value={formData.painLevel}
                onChange={handleInputChange}
                className="w-full"
              />
              <div className="mt-1 flex justify-between text-xs text-gray-500">
                <span>–ù–µ–º–∞—î –±–æ–ª—é (0)</span>
                <span>–ù–µ—Å—Ç–µ—Ä–ø–Ω–∏–π –±—ñ–ª—å (10)</span>
              </div>
            </div>

            <div>
              <label className="mb-2 block text-sm font-medium">–ê–ª–µ—Ä–≥—ñ—è</label>
              <div className="mb-2 flex space-x-4">
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="hasAllergy"
                    checked={formData.hasAllergy}
                    onChange={() =>
                      setFormData((prev) => ({ ...prev, hasAllergy: true }))
                    }
                    className="mr-1"
                  />
                  –¢–∞–∫
                </label>
                <label className="flex cursor-pointer items-center">
                  <input
                    type="radio"
                    name="hasAllergy"
                    checked={!formData.hasAllergy}
                    onChange={() =>
                      setFormData((prev) => ({ ...prev, hasAllergy: false }))
                    }
                    className="mr-1"
                  />
                  –ù—ñ
                </label>
              </div>
              {formData.hasAllergy && (
                <input
                  type="text"
                  name="allergies"
                  value={formData.allergies}
                  onChange={handleInputChange}
                  placeholder="–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –∞–ª–µ—Ä–≥—ñ—ó"
                  className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
                />
              )}
            </div>
          </div>
        </div>

        {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ */}
        <div className="rounded-lg bg-gray-50 p-4">
          <h2 className="mb-4 flex items-center text-lg font-semibold">
            üí¨ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
          </h2>
          <textarea
            name="additionalNotes"
            value={formData.additionalNotes}
            onChange={handleInputChange}
            placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–º—ñ—Ç–∫–∏"
            rows={3}
            className="w-full rounded-md border border-gray-300 p-2 focus:border-transparent focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full rounded-md bg-blue-600 px-4 py-3 font-medium text-white hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
        >
          {isSubmitting ? '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é'}
        </button>

        {submitMessage && (
          <div className="rounded-md bg-gray-100 p-4 text-center">
            {submitMessage}
          </div>
        )}
      </form>
    </div>
  )
}
